[
    {
        "input": "import argparse\nimport json\nimport os\nimport requests\nimport subprocess\nimport tempfile\n\n##### MermaidDiagramGenerator Class #####\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._entries_dir = os.path.join(os.getcwd(), 'Entries')\n        os.makedirs(self._entries_dir, exist_ok=True)\n\n    def convert_to_image(self, mermaid_code, entry_number, output_number):\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_filename = f\"entry_{entry_number}_{output_number}.png\"\n        output_path = os.path.join(self._entries_dir, output_filename)\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        result = subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], shell=True, check=False)\n        os.remove(input_path)\n        if result.returncode != 0:\n            raise ValueError(\"Mermaid diagram generation failed.\")\n\n##### Script to Generate Responses and Validate Mermaid Diagrams #####\ndef read_input(input_source):\n    if os.path.isfile(input_source):\n        filename, file_extension = os.path.splitext(input_source)\n        if file_extension == '.json':\n            with open(input_source, 'r') as file:\n                return json.load(file)\n        elif file_extension == '.txt':\n            with open(input_source, 'r') as file:\n                return [{\"input\": file.read()}]\n    else:\n        return [{\"input\": input_source}]\n\ndef generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs):\n    prompt_template = f\"{prompt}\\n```mermaid\\n\"\n\n    url = \"http://127.0.0.1:5000/v1/completions\"\n    headers = {\"Content-Type\": \"application/json\"}\n    dataset_entries = []\n\n    for output_number, temp in enumerate(base_temperatures, start=1):\n        while True:\n            data = {\n                \"prompt\": prompt_template,\n                \"max_tokens\": 4096,\n                \"temperature\": temp,\n                \"top_p\": 1.0,\n                \"seed\": -1,\n                \"top_k\": 4,\n                \"repetition_penalty\": 1.0,\n                \"guidance_scale\": 1.0,\n                \"typical_p\": 1.0,\n                \"stream\": stream,\n            }\n\n            response = requests.post(url, headers=headers, json=data, verify=False)\n            response_text = response.json()['choices'][0]['text'].strip()\n\n            if response_text.endswith(\"```\"):  # Check if response ends with ```\n                response_text = response_text[:-3].strip()  # Remove ``` from the end\n\n            if response_text not in unique_outputs:\n                try:\n                    image_path = generator.convert_to_image(response_text, entry_number, output_number)\n                    print(f\"Mermaid diagram generated at: {image_path}\")\n                    unique_outputs.add(response_text)\n                    break\n                except ValueError as e:\n                    print(f\"Validation failed, retrying... Error: {e}\")\n            else:\n                temp += 0.1  # Adjust temperature if output is not unique\n\n        dataset_entry = {\n            \"input\": prompt,\n            \"output\": f\"```mermaid\\n{response_text}\\n```\",\n            \"temperature\": temp\n        }\n        dataset_entries.append(dataset_entry)\n\n    return dataset_entries\n\ndef generate_unique_responses(input_data, base_temperatures, stream, generator):\n    all_entries = []\n    unique_outputs = set()\n\n    for entry_number, entry in enumerate(input_data, start=1):\n        prompt = entry.get(\"input\", \"\")\n        if prompt:\n            entries = generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs)\n            all_entries.extend(entries)  # Extend the list with new entries\n\n    return all_entries\n\ndef main(input_source, stream=False):\n    generator = MermaidDiagramGenerator()\n    input_data = read_input(input_source)\n    base_temperatures = [i / 10 for i in range(5, 11)]  # Adjusted for batch of unique outputs per input\n    output_file = \"output.json\"\n\n    all_entries = generate_unique_responses(input_data, base_temperatures, stream, generator)\n\n    # Write all entries to the JSON file at once\n    with open(output_file, \"w\") as f:\n        json.dump(all_entries, f, indent=4)  # Dump the entire list of entries into the file\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Generate unique responses and validate Mermaid diagrams.\")\n    parser.add_argument('input_source', type=str, help='A multi-line string, path to a .txt file, or a .json file with prompts.')\n    parser.add_argument('--stream', action='store_true', help='Use streaming responses.')\n    args = parser.parse_args()\n    \n    main(args.input_source, args.stream)\n",
        "output": "```mermaid\ngraph TD\n    A[Start] --> B[Initialize MermaidDiagramGenerator]\n    B --> C[Read Input Data]\n    C --> D{Input is File?}\n    D --> |Yes| E[Load JSON Data]\n    D --> |No| F[Create Single Prompt Entry]\n    \n    E --> G[Generate Response for Each Prompt]\n    F --> G\n    \n    subgraph Generate Response\n        direction TB\n        \n        G --> H[Get Base Temperatures]\n        H --> I[Loop Through Each Temperature]\n        I --> J[Send Request & Get Response]\n        J --> K{Response Unique?}\n        K --> |Yes| L[Add Entry to List]\n        K --> |No| M[Increment Temperature]\n        M --> I\n        \n        L --> N[Write Mermaid Image if PNG]\n        N --> O[Return Entry List]\n        \n    end\n    \n    O --> P[Write Entries to JSON File]\n    P --> Q[End]\n```",
        "temperature": 0.5
    },
    {
        "input": "import argparse\nimport json\nimport os\nimport requests\nimport subprocess\nimport tempfile\n\n##### MermaidDiagramGenerator Class #####\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._entries_dir = os.path.join(os.getcwd(), 'Entries')\n        os.makedirs(self._entries_dir, exist_ok=True)\n\n    def convert_to_image(self, mermaid_code, entry_number, output_number):\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_filename = f\"entry_{entry_number}_{output_number}.png\"\n        output_path = os.path.join(self._entries_dir, output_filename)\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        result = subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], shell=True, check=False)\n        os.remove(input_path)\n        if result.returncode != 0:\n            raise ValueError(\"Mermaid diagram generation failed.\")\n\n##### Script to Generate Responses and Validate Mermaid Diagrams #####\ndef read_input(input_source):\n    if os.path.isfile(input_source):\n        filename, file_extension = os.path.splitext(input_source)\n        if file_extension == '.json':\n            with open(input_source, 'r') as file:\n                return json.load(file)\n        elif file_extension == '.txt':\n            with open(input_source, 'r') as file:\n                return [{\"input\": file.read()}]\n    else:\n        return [{\"input\": input_source}]\n\ndef generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs):\n    prompt_template = f\"{prompt}\\n```mermaid\\n\"\n\n    url = \"http://127.0.0.1:5000/v1/completions\"\n    headers = {\"Content-Type\": \"application/json\"}\n    dataset_entries = []\n\n    for output_number, temp in enumerate(base_temperatures, start=1):\n        while True:\n            data = {\n                \"prompt\": prompt_template,\n                \"max_tokens\": 4096,\n                \"temperature\": temp,\n                \"top_p\": 1.0,\n                \"seed\": -1,\n                \"top_k\": 4,\n                \"repetition_penalty\": 1.0,\n                \"guidance_scale\": 1.0,\n                \"typical_p\": 1.0,\n                \"stream\": stream,\n            }\n\n            response = requests.post(url, headers=headers, json=data, verify=False)\n            response_text = response.json()['choices'][0]['text'].strip()\n\n            if response_text.endswith(\"```\"):  # Check if response ends with ```\n                response_text = response_text[:-3].strip()  # Remove ``` from the end\n\n            if response_text not in unique_outputs:\n                try:\n                    image_path = generator.convert_to_image(response_text, entry_number, output_number)\n                    print(f\"Mermaid diagram generated at: {image_path}\")\n                    unique_outputs.add(response_text)\n                    break\n                except ValueError as e:\n                    print(f\"Validation failed, retrying... Error: {e}\")\n            else:\n                temp += 0.1  # Adjust temperature if output is not unique\n\n        dataset_entry = {\n            \"input\": prompt,\n            \"output\": f\"```mermaid\\n{response_text}\\n```\",\n            \"temperature\": temp\n        }\n        dataset_entries.append(dataset_entry)\n\n    return dataset_entries\n\ndef generate_unique_responses(input_data, base_temperatures, stream, generator):\n    all_entries = []\n    unique_outputs = set()\n\n    for entry_number, entry in enumerate(input_data, start=1):\n        prompt = entry.get(\"input\", \"\")\n        if prompt:\n            entries = generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs)\n            all_entries.extend(entries)  # Extend the list with new entries\n\n    return all_entries\n\ndef main(input_source, stream=False):\n    generator = MermaidDiagramGenerator()\n    input_data = read_input(input_source)\n    base_temperatures = [i / 10 for i in range(5, 11)]  # Adjusted for batch of unique outputs per input\n    output_file = \"output.json\"\n\n    all_entries = generate_unique_responses(input_data, base_temperatures, stream, generator)\n\n    # Write all entries to the JSON file at once\n    with open(output_file, \"w\") as f:\n        json.dump(all_entries, f, indent=4)  # Dump the entire list of entries into the file\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Generate unique responses and validate Mermaid diagrams.\")\n    parser.add_argument('input_source', type=str, help='A multi-line string, path to a .txt file, or a .json file with prompts.')\n    parser.add_argument('--stream', action='store_true', help='Use streaming responses.')\n    args = parser.parse_args()\n    \n    main(args.input_source, args.stream)\n",
        "output": "```mermaid\ngraph TD\n    A[Start] --> B[Define MermaidDiagramGenerator Class]\n\n    B --> C[Define _init_ method]\n        C --> D[Initialize theme and background attributes]\n        C --> E[Initialize entries directory path]\n\n    B --> F[Define convert_to_image method]\n        F --> G[Remove Mermaid code block markers]\n        G --> H[Generate image using mmdc]\n        H --> I{Check for errors}\n        I --> J[Return image path]\n\n    C --> K[Define generate_response method]\n        K --> L{For each base temperature}\n        L --> M[Send prompt with temperature]\n        M --> N[Get response text]\n        N --> O{Response ends with ```?}\n        O --> P[Remove code block markers]\n        P --> Q[Check if output is unique]\n        Q --> R[Add output to dataset entry]\n        R --> S[Add dataset entry to list]\n        S --> T{Base temperatures exhausted?}\n        T --> U[Adjust temperature and retry]\n        U --> L\n\n    K --> V[Define generate_unique_responses method]\n        V --> W[Read input source]\n        W --> X[Loop through prompts]\n        X --> Y[Generate unique responses]\n        Y --> Z[Write output to JSON file]\n\n    Z --> AA[End]\n```",
        "temperature": 0.6
    },
    {
        "input": "import argparse\nimport json\nimport os\nimport requests\nimport subprocess\nimport tempfile\n\n##### MermaidDiagramGenerator Class #####\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._entries_dir = os.path.join(os.getcwd(), 'Entries')\n        os.makedirs(self._entries_dir, exist_ok=True)\n\n    def convert_to_image(self, mermaid_code, entry_number, output_number):\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_filename = f\"entry_{entry_number}_{output_number}.png\"\n        output_path = os.path.join(self._entries_dir, output_filename)\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        result = subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], shell=True, check=False)\n        os.remove(input_path)\n        if result.returncode != 0:\n            raise ValueError(\"Mermaid diagram generation failed.\")\n\n##### Script to Generate Responses and Validate Mermaid Diagrams #####\ndef read_input(input_source):\n    if os.path.isfile(input_source):\n        filename, file_extension = os.path.splitext(input_source)\n        if file_extension == '.json':\n            with open(input_source, 'r') as file:\n                return json.load(file)\n        elif file_extension == '.txt':\n            with open(input_source, 'r') as file:\n                return [{\"input\": file.read()}]\n    else:\n        return [{\"input\": input_source}]\n\ndef generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs):\n    prompt_template = f\"{prompt}\\n```mermaid\\n\"\n\n    url = \"http://127.0.0.1:5000/v1/completions\"\n    headers = {\"Content-Type\": \"application/json\"}\n    dataset_entries = []\n\n    for output_number, temp in enumerate(base_temperatures, start=1):\n        while True:\n            data = {\n                \"prompt\": prompt_template,\n                \"max_tokens\": 4096,\n                \"temperature\": temp,\n                \"top_p\": 1.0,\n                \"seed\": -1,\n                \"top_k\": 4,\n                \"repetition_penalty\": 1.0,\n                \"guidance_scale\": 1.0,\n                \"typical_p\": 1.0,\n                \"stream\": stream,\n            }\n\n            response = requests.post(url, headers=headers, json=data, verify=False)\n            response_text = response.json()['choices'][0]['text'].strip()\n\n            if response_text.endswith(\"```\"):  # Check if response ends with ```\n                response_text = response_text[:-3].strip()  # Remove ``` from the end\n\n            if response_text not in unique_outputs:\n                try:\n                    image_path = generator.convert_to_image(response_text, entry_number, output_number)\n                    print(f\"Mermaid diagram generated at: {image_path}\")\n                    unique_outputs.add(response_text)\n                    break\n                except ValueError as e:\n                    print(f\"Validation failed, retrying... Error: {e}\")\n            else:\n                temp += 0.1  # Adjust temperature if output is not unique\n\n        dataset_entry = {\n            \"input\": prompt,\n            \"output\": f\"```mermaid\\n{response_text}\\n```\",\n            \"temperature\": temp\n        }\n        dataset_entries.append(dataset_entry)\n\n    return dataset_entries\n\ndef generate_unique_responses(input_data, base_temperatures, stream, generator):\n    all_entries = []\n    unique_outputs = set()\n\n    for entry_number, entry in enumerate(input_data, start=1):\n        prompt = entry.get(\"input\", \"\")\n        if prompt:\n            entries = generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs)\n            all_entries.extend(entries)  # Extend the list with new entries\n\n    return all_entries\n\ndef main(input_source, stream=False):\n    generator = MermaidDiagramGenerator()\n    input_data = read_input(input_source)\n    base_temperatures = [i / 10 for i in range(5, 11)]  # Adjusted for batch of unique outputs per input\n    output_file = \"output.json\"\n\n    all_entries = generate_unique_responses(input_data, base_temperatures, stream, generator)\n\n    # Write all entries to the JSON file at once\n    with open(output_file, \"w\") as f:\n        json.dump(all_entries, f, indent=4)  # Dump the entire list of entries into the file\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Generate unique responses and validate Mermaid diagrams.\")\n    parser.add_argument('input_source', type=str, help='A multi-line string, path to a .txt file, or a .json file with prompts.')\n    parser.add_argument('--stream', action='store_true', help='Use streaming responses.')\n    args = parser.parse_args()\n    \n    main(args.input_source, args.stream)\n",
        "output": "```mermaid\ngraph TD\n    A[Start] --> B[Parse Arguments]\n    B --> C{Input Source}\n    C --> |.json file| D[Read JSON File]\n    C --> |.txt file| E[Read Text File]\n    C --> |String| F[Create Entry]\n    D --> G[Generate Responses]\n    E --> G\n    F --> G\n    \n    subgraph Generate Responses\n        direction TB\n        \n        G --> H{For Each Entry}\n        H -->|No| I[Done]\n        H -->|Yes| J[Get Base Temperatures]\n        J --> K[Call Generate Response]\n        \n        subgraph Generate Response\n            direction TB\n            \n            K --> L[Post Request]\n            L --> M[Get Response]\n            M --> N{Output Valid?}\n            N --> |No| O[Increment Temperature]\n            O --> K\n            N --> |Yes| P[Save Output]\n            \n        end\n        \n        P --> Q[Add Entry to List]\n        Q --> H\n        \n    end\n    \n    I --> R[Write Entries to File]\n    R --> S[End]\n```",
        "temperature": 0.7
    },
    {
        "input": "import argparse\nimport json\nimport os\nimport requests\nimport subprocess\nimport tempfile\n\n##### MermaidDiagramGenerator Class #####\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._entries_dir = os.path.join(os.getcwd(), 'Entries')\n        os.makedirs(self._entries_dir, exist_ok=True)\n\n    def convert_to_image(self, mermaid_code, entry_number, output_number):\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_filename = f\"entry_{entry_number}_{output_number}.png\"\n        output_path = os.path.join(self._entries_dir, output_filename)\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        result = subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], shell=True, check=False)\n        os.remove(input_path)\n        if result.returncode != 0:\n            raise ValueError(\"Mermaid diagram generation failed.\")\n\n##### Script to Generate Responses and Validate Mermaid Diagrams #####\ndef read_input(input_source):\n    if os.path.isfile(input_source):\n        filename, file_extension = os.path.splitext(input_source)\n        if file_extension == '.json':\n            with open(input_source, 'r') as file:\n                return json.load(file)\n        elif file_extension == '.txt':\n            with open(input_source, 'r') as file:\n                return [{\"input\": file.read()}]\n    else:\n        return [{\"input\": input_source}]\n\ndef generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs):\n    prompt_template = f\"{prompt}\\n```mermaid\\n\"\n\n    url = \"http://127.0.0.1:5000/v1/completions\"\n    headers = {\"Content-Type\": \"application/json\"}\n    dataset_entries = []\n\n    for output_number, temp in enumerate(base_temperatures, start=1):\n        while True:\n            data = {\n                \"prompt\": prompt_template,\n                \"max_tokens\": 4096,\n                \"temperature\": temp,\n                \"top_p\": 1.0,\n                \"seed\": -1,\n                \"top_k\": 4,\n                \"repetition_penalty\": 1.0,\n                \"guidance_scale\": 1.0,\n                \"typical_p\": 1.0,\n                \"stream\": stream,\n            }\n\n            response = requests.post(url, headers=headers, json=data, verify=False)\n            response_text = response.json()['choices'][0]['text'].strip()\n\n            if response_text.endswith(\"```\"):  # Check if response ends with ```\n                response_text = response_text[:-3].strip()  # Remove ``` from the end\n\n            if response_text not in unique_outputs:\n                try:\n                    image_path = generator.convert_to_image(response_text, entry_number, output_number)\n                    print(f\"Mermaid diagram generated at: {image_path}\")\n                    unique_outputs.add(response_text)\n                    break\n                except ValueError as e:\n                    print(f\"Validation failed, retrying... Error: {e}\")\n            else:\n                temp += 0.1  # Adjust temperature if output is not unique\n\n        dataset_entry = {\n            \"input\": prompt,\n            \"output\": f\"```mermaid\\n{response_text}\\n```\",\n            \"temperature\": temp\n        }\n        dataset_entries.append(dataset_entry)\n\n    return dataset_entries\n\ndef generate_unique_responses(input_data, base_temperatures, stream, generator):\n    all_entries = []\n    unique_outputs = set()\n\n    for entry_number, entry in enumerate(input_data, start=1):\n        prompt = entry.get(\"input\", \"\")\n        if prompt:\n            entries = generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs)\n            all_entries.extend(entries)  # Extend the list with new entries\n\n    return all_entries\n\ndef main(input_source, stream=False):\n    generator = MermaidDiagramGenerator()\n    input_data = read_input(input_source)\n    base_temperatures = [i / 10 for i in range(5, 11)]  # Adjusted for batch of unique outputs per input\n    output_file = \"output.json\"\n\n    all_entries = generate_unique_responses(input_data, base_temperatures, stream, generator)\n\n    # Write all entries to the JSON file at once\n    with open(output_file, \"w\") as f:\n        json.dump(all_entries, f, indent=4)  # Dump the entire list of entries into the file\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Generate unique responses and validate Mermaid diagrams.\")\n    parser.add_argument('input_source', type=str, help='A multi-line string, path to a .txt file, or a .json file with prompts.')\n    parser.add_argument('--stream', action='store_true', help='Use streaming responses.')\n    args = parser.parse_args()\n    \n    main(args.input_source, args.stream)\n",
        "output": "```mermaid\ngraph TB;\n   A[Start] --> B[Define MermaidDiagramGenerator Class];\n   B --> C[Define convert_to_image method];\n   C --> D[Define _remove_mermaid_block_markers helper method];\n   D --> E[Define _generate_image_from_code method];\n   E --> F[Define generate_response method];\n   F --> G[Read input source argument];\n   G --> H[Generate unique responses for each input];\n   H --> I[Write all entries to JSON file];\n   I --> J[Main entry point];\n   J --> K[Parse input source argument];\n   K --> L[Call main function];\n   L --> M[End];\n```",
        "temperature": 0.8
    },
    {
        "input": "import argparse\nimport json\nimport os\nimport requests\nimport subprocess\nimport tempfile\n\n##### MermaidDiagramGenerator Class #####\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._entries_dir = os.path.join(os.getcwd(), 'Entries')\n        os.makedirs(self._entries_dir, exist_ok=True)\n\n    def convert_to_image(self, mermaid_code, entry_number, output_number):\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_filename = f\"entry_{entry_number}_{output_number}.png\"\n        output_path = os.path.join(self._entries_dir, output_filename)\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        result = subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], shell=True, check=False)\n        os.remove(input_path)\n        if result.returncode != 0:\n            raise ValueError(\"Mermaid diagram generation failed.\")\n\n##### Script to Generate Responses and Validate Mermaid Diagrams #####\ndef read_input(input_source):\n    if os.path.isfile(input_source):\n        filename, file_extension = os.path.splitext(input_source)\n        if file_extension == '.json':\n            with open(input_source, 'r') as file:\n                return json.load(file)\n        elif file_extension == '.txt':\n            with open(input_source, 'r') as file:\n                return [{\"input\": file.read()}]\n    else:\n        return [{\"input\": input_source}]\n\ndef generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs):\n    prompt_template = f\"{prompt}\\n```mermaid\\n\"\n\n    url = \"http://127.0.0.1:5000/v1/completions\"\n    headers = {\"Content-Type\": \"application/json\"}\n    dataset_entries = []\n\n    for output_number, temp in enumerate(base_temperatures, start=1):\n        while True:\n            data = {\n                \"prompt\": prompt_template,\n                \"max_tokens\": 4096,\n                \"temperature\": temp,\n                \"top_p\": 1.0,\n                \"seed\": -1,\n                \"top_k\": 4,\n                \"repetition_penalty\": 1.0,\n                \"guidance_scale\": 1.0,\n                \"typical_p\": 1.0,\n                \"stream\": stream,\n            }\n\n            response = requests.post(url, headers=headers, json=data, verify=False)\n            response_text = response.json()['choices'][0]['text'].strip()\n\n            if response_text.endswith(\"```\"):  # Check if response ends with ```\n                response_text = response_text[:-3].strip()  # Remove ``` from the end\n\n            if response_text not in unique_outputs:\n                try:\n                    image_path = generator.convert_to_image(response_text, entry_number, output_number)\n                    print(f\"Mermaid diagram generated at: {image_path}\")\n                    unique_outputs.add(response_text)\n                    break\n                except ValueError as e:\n                    print(f\"Validation failed, retrying... Error: {e}\")\n            else:\n                temp += 0.1  # Adjust temperature if output is not unique\n\n        dataset_entry = {\n            \"input\": prompt,\n            \"output\": f\"```mermaid\\n{response_text}\\n```\",\n            \"temperature\": temp\n        }\n        dataset_entries.append(dataset_entry)\n\n    return dataset_entries\n\ndef generate_unique_responses(input_data, base_temperatures, stream, generator):\n    all_entries = []\n    unique_outputs = set()\n\n    for entry_number, entry in enumerate(input_data, start=1):\n        prompt = entry.get(\"input\", \"\")\n        if prompt:\n            entries = generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs)\n            all_entries.extend(entries)  # Extend the list with new entries\n\n    return all_entries\n\ndef main(input_source, stream=False):\n    generator = MermaidDiagramGenerator()\n    input_data = read_input(input_source)\n    base_temperatures = [i / 10 for i in range(5, 11)]  # Adjusted for batch of unique outputs per input\n    output_file = \"output.json\"\n\n    all_entries = generate_unique_responses(input_data, base_temperatures, stream, generator)\n\n    # Write all entries to the JSON file at once\n    with open(output_file, \"w\") as f:\n        json.dump(all_entries, f, indent=4)  # Dump the entire list of entries into the file\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Generate unique responses and validate Mermaid diagrams.\")\n    parser.add_argument('input_source', type=str, help='A multi-line string, path to a .txt file, or a .json file with prompts.')\n    parser.add_argument('--stream', action='store_true', help='Use streaming responses.')\n    args = parser.parse_args()\n    \n    main(args.input_source, args.stream)\n",
        "output": "```mermaid\ngraph TD\n    A[Start Script] --> B[Define MermaidDiagramGenerator Class]\n    B --> C[Define read_input function]\n    C --> D[Define generate_response function]\n    D --> E[Define generate_unique_responses function]\n    E --> F[Define main function]\n    \n    F --> G[Initialize MermaidDiagramGenerator object]\n    G --> H[Read input source]\n    H --> I{Input file or string?}\n    I --> |Input file| J[Load JSON input]\n    J --> K[Generate responses]\n    I --> |Input string| L[Convert input string to dataset entry]\n    L --> K\n    \n    K --> M[Write output JSON file]\n    M --> N[End Script]\n```",
        "temperature": 0.9
    },
    {
        "input": "import argparse\nimport json\nimport os\nimport requests\nimport subprocess\nimport tempfile\n\n##### MermaidDiagramGenerator Class #####\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._entries_dir = os.path.join(os.getcwd(), 'Entries')\n        os.makedirs(self._entries_dir, exist_ok=True)\n\n    def convert_to_image(self, mermaid_code, entry_number, output_number):\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_filename = f\"entry_{entry_number}_{output_number}.png\"\n        output_path = os.path.join(self._entries_dir, output_filename)\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        result = subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], shell=True, check=False)\n        os.remove(input_path)\n        if result.returncode != 0:\n            raise ValueError(\"Mermaid diagram generation failed.\")\n\n##### Script to Generate Responses and Validate Mermaid Diagrams #####\ndef read_input(input_source):\n    if os.path.isfile(input_source):\n        filename, file_extension = os.path.splitext(input_source)\n        if file_extension == '.json':\n            with open(input_source, 'r') as file:\n                return json.load(file)\n        elif file_extension == '.txt':\n            with open(input_source, 'r') as file:\n                return [{\"input\": file.read()}]\n    else:\n        return [{\"input\": input_source}]\n\ndef generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs):\n    prompt_template = f\"{prompt}\\n```mermaid\\n\"\n\n    url = \"http://127.0.0.1:5000/v1/completions\"\n    headers = {\"Content-Type\": \"application/json\"}\n    dataset_entries = []\n\n    for output_number, temp in enumerate(base_temperatures, start=1):\n        while True:\n            data = {\n                \"prompt\": prompt_template,\n                \"max_tokens\": 4096,\n                \"temperature\": temp,\n                \"top_p\": 1.0,\n                \"seed\": -1,\n                \"top_k\": 4,\n                \"repetition_penalty\": 1.0,\n                \"guidance_scale\": 1.0,\n                \"typical_p\": 1.0,\n                \"stream\": stream,\n            }\n\n            response = requests.post(url, headers=headers, json=data, verify=False)\n            response_text = response.json()['choices'][0]['text'].strip()\n\n            if response_text.endswith(\"```\"):  # Check if response ends with ```\n                response_text = response_text[:-3].strip()  # Remove ``` from the end\n\n            if response_text not in unique_outputs:\n                try:\n                    image_path = generator.convert_to_image(response_text, entry_number, output_number)\n                    print(f\"Mermaid diagram generated at: {image_path}\")\n                    unique_outputs.add(response_text)\n                    break\n                except ValueError as e:\n                    print(f\"Validation failed, retrying... Error: {e}\")\n            else:\n                temp += 0.1  # Adjust temperature if output is not unique\n\n        dataset_entry = {\n            \"input\": prompt,\n            \"output\": f\"```mermaid\\n{response_text}\\n```\",\n            \"temperature\": temp\n        }\n        dataset_entries.append(dataset_entry)\n\n    return dataset_entries\n\ndef generate_unique_responses(input_data, base_temperatures, stream, generator):\n    all_entries = []\n    unique_outputs = set()\n\n    for entry_number, entry in enumerate(input_data, start=1):\n        prompt = entry.get(\"input\", \"\")\n        if prompt:\n            entries = generate_response(prompt, base_temperatures, stream, generator, entry_number, unique_outputs)\n            all_entries.extend(entries)  # Extend the list with new entries\n\n    return all_entries\n\ndef main(input_source, stream=False):\n    generator = MermaidDiagramGenerator()\n    input_data = read_input(input_source)\n    base_temperatures = [i / 10 for i in range(5, 11)]  # Adjusted for batch of unique outputs per input\n    output_file = \"output.json\"\n\n    all_entries = generate_unique_responses(input_data, base_temperatures, stream, generator)\n\n    # Write all entries to the JSON file at once\n    with open(output_file, \"w\") as f:\n        json.dump(all_entries, f, indent=4)  # Dump the entire list of entries into the file\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Generate unique responses and validate Mermaid diagrams.\")\n    parser.add_argument('input_source', type=str, help='A multi-line string, path to a .txt file, or a .json file with prompts.')\n    parser.add_argument('--stream', action='store_true', help='Use streaming responses.')\n    args = parser.parse_args()\n    \n    main(args.input_source, args.stream)\n",
        "output": "```mermaid\ngraph TB;\n    A[Start] --> B[Initialize MermaidDiagramGenerator];\n    B --> C[Read input source];\n    C --> D{Input file or string?};\n    D --> |Input file| E[Load JSON file];\n    D --> |Multi-line string| F[Create single input entry];\n    E --> G[Generate responses for each input];\n    F --> G;\n    \n    subgraph Generate Response\n        direction TB;\n        \n        G --> H[Temperature loop];\n        H --> I[Send prompt to LLM];\n        I --> J{Get valid response?};\n        J --> |No| K[Adjust temperature];\n        K --> H;\n        J --> |Yes| L[Convert response to image];\n        \n        L --> M[Add entry to output list];\n        M --> N[Write output file];\n        \n    end\n    \n    N --> O[End];\n```",
        "temperature": 1.0
    }
]