[
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TD;\n        A[Start] --> B[Import Modules];\n        B --> C[Define Class: MermaidDiagramGenerator];\n        C --> D[Initialize with Theme and Background];\n        D --> E[Define convert_to_image];\n        E --> F[Read Input Source File/String];\n        F --> G[Remove Mermaid Block Markers];\n        G --> H[Generate Image File Path];\n        H --> I[Create Temporary File];\n        I --> J[Write Mermaid Code to Temporary File];\n        J --> K[Generate Image using mmdc Command];\n        K --> L[Delete Temporary File];\n        L --> M[Return Image File Path];\n        M --> N[Define _is_file];\n        N --> O[Get File/String Content];\n        O --> P[Strip Newlines];\n        P --> Q[Return Clean Code];\n        Q --> R[Define _generate_image_from_code];\n        R --> S[Create Temporary File];\n        S --> T[Write Mermaid Code to Temporary File];\n        T --> U[Generate Image using mmdc Command];\n        U --> V[Delete Temporary File];\n        V --> W[Main Code];\n        W --> X[Create Generator Object];\n        X --> Y[Loop Through Input Sources];\n        Y --> Z[Print Source];\n        Z --> A1[Generate Image];\n        A1 --> B1[Print Image Path];\n        B1 --> Y;\n        Y --> C1[Handle Keyboard Interrupt];\n        C1 --> D1[Print Exit Message];\n        D1 --> E1[End];\n        E1 --> F1[Handle Exceptions];\n        F1 --> G1[Print Error Message];\n        G1 --> E1;\n    \n    ```",
        "temperature": 0.5
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TB\n        A[Start] --> B[Initialize Generator]\n        B --> C[Define convert_to_image]\n        C --> D[Read input source content]\n        D --> E{Input is file?}\n        E -->|Yes| F[Read from file]\n        E -->|No| G[Return input source]\n        F --> H[Remove markers] \n        G --> H\n        H --> I[Generate image file]\n        I --> J[Return image path]\n    \n        K[Start main loop] --> L[Select input source]\n        L --> M[Call convert_to_image]\n        M --> N[Print image path]\n        N --> O[Increment source index]\n        O --> P{Index >= sources?}\n        P -->|Yes| Q[Reset index]\n        Q --> K\n        P -->|No| K\n    \n        B --> R[Define _is_file]\n        R --> S[Open file and read]\n        S --> T[Return file content]\n    \n        B --> U[Define _generate_image]\n        U --> V[Create temp file]\n        V --> W[Write mermaid code]\n        W --> X[Call mmdc command]\n        X --> Y[Delete temp file]\n    \n        B --> Z[End class]\n```",
        "temperature": 0.6
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TB\n        A[Start] --> B[Initialize Generator]\n        B --> C[Define convert_to_image]\n        C --> D[Read input source content]\n        D --> E[Remove mermaid markers]\n        E --> F[Generate temporary code file]\n        F --> G[Run mmdc command]\n        G --> H[Delete temporary file]\n        H --> I[Return image path]\n    \n        J[Start main loop] --> K{Input sources exhausted?}\n        K --> |No| L[Select next source]\n        L --> M[Call convert_to_image]\n        M --> N[Print image path]\n        N --> K\n        \n        K --> |Yes| O[End program]\n        \n        J --> |Keyboard Interrupt| P[Print stop message]\n        P --> O\n        \n        J --> |Exception| Q[Print error message]\n        Q --> O\n```",
        "temperature": 0.7
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TD\n        A[Start] --> B[Import Modules]\n        B --> C[Define Cache Dir]\n        C --> D[Initialize Generator Class]\n    \n        E[Convert to Image] --> F[Read Input Source Content]\n        F --> G{Input is File?}\n        G --> |Yes| H[Read from File]\n        G --> |No| I[Return Input Source]\n        \n        H --> J[Remove Markers]\n        I --> J\n        \n        J --> K[Create Temp File]\n        K --> L[Write Code to Temp File]\n        L --> M[Delete Temp File]\n        \n        M --> N[Call mmdc Command]\n        N --> O[Delete Temp File]\n        \n        E --> P[Increment Source Index]\n        P --> Q[Select Next Source]\n        Q --> E\n    \n        B --> R[Main Loop]\n        R --> S{Keyboard Interrupt?}\n        S --> |Yes| T[Print Message and Exit]\n        S --> |No| E\n        \n        T --> U[Handle Exceptions]\n        U --> V[Print Error Message]\n    \n        V --> R\n```",
        "temperature": 0.8
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TB\n    \tA[Start] --> B[Import Modules]\n    \tB --> C[Define Constructor]\n    \tC --> D[Define convert_to_image]\n    \tD --> E[Read Input Source File/String]\n    \tE --> F[Remove Mermaid Block Markers]\n    \tF --> G[Generate Temp File with Code]\n    \tG --> H[Call mmdc Command]\n    \tH --> I[Delete Temp File]\n    \tI --> J[Return Image Path]\n    \n    \tK[Start Main] --> L[Initialize Generator]\n    \tL --> M[Set Current Source Index]\n    \tM --> N{Source Index < Length}\n    \tN -->|Yes| O[Call convert_to_image]\n    \tO --> P[Print Image Path]\n    \tP --> Q[Increment Source Index]\n    \tQ --> N\n    \tN -->|No| R[End Main]\n    \n    \tS[Exception Handler] --> T[Print Error Message]\n    \tT --> R\n    \n    \tU[Call Generator] --> V[Define Custom Theme]\n    \tV --> W[Generate Image from Code]\n    \tW --> X[Delete Temp File]\n    \tX --> Y[Return Image Path]\n    \n    \tZ[End Module]\n    ```",
        "temperature": 0.9
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TD\n        A[Start] --> B[Initialize \n            MermaidDiagramGenerator]\n        B --> C[Initialize cache_dir]\n        C --> D[Define convert_to_image]\n        D --> E[Read input source content]\n        E --> F{Input is file?}\n        F --> |Yes| G[Read from file]\n        F --> |No| H[Return input source]\n        G --> I[Remove markers]\n        H --> I\n        I --> J[Create temp file]\n        J --> K[Generate image with mmdc]\n        L[Delete temp file] --> M[Return image path]\n        M --> N[Define main]\n      \n        N --> O[Create generator instance]\n        O --> P[Initialize input sources]\n        P --> Q[Start infinite loop]\n        Q --> R[Print current input source]\n        R --> S[Call convert_to_image]\n        S --> T[Print generated image path]\n        T --> U[Increment source index]\n        U --> V{Index >= sources?}\n        V --> |Yes| W[Print error on exception]\n        V --> |No| Q\n    ```",
        "temperature": 1.0
    }
]