[
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TB;\n        A[Start] --> B[Initialize Generator];\n        B --> C[Define convert_to_image];\n        C --> D[Read input source content];\n        D --> E[Remove mermaid markers];\n        E --> F[Generate image temp file];\n        F --> G[Run mmdc command];\n        G --> H[Delete temp file];\n        H --> I[Return image path];\n    \n        J[Main] --> K[Create generator instance];\n        K --> L[Initialize input sources];\n        L --> M[Start input source loop];\n    \n        M --> N{Input source loop};\n        N -->|True| O[Call convert_to_image];\n        O --> P[Print image path];\n        P --> Q[Increment source index];\n        Q --> N;\n    \n        N -->|False| R[Handle exceptions];\n        R --> S[End program];\n    \n        subgraph Define convert_to_image\n            direction TB;\n            C1[Check if file];\n            C1 -->|Yes| C2[Read file content];\n            C1 -->|No| C3[Use input string];\n            C2 --> C4[Strip markers];\n            C3 --> C4;\n            C4 --> C5[Generate image command];\n            C5 --> C6[Delete temp file];\n            C6 --> I;\n        end\n    \n        subgraph Main logic\n            direction TB;\n            J --> L[Initialize input sources];\n            L --> M[Start input source loop];\n            M --> O --> P --> Q;\n            Q --> M;\n        end\n    \n        S[End program];\n    ```",
        "temperature": 0.5
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TD\n        A[Start] --> B[Import Modules]\n        B --> C[Define Constructor]\n        C --> D[Define convert_to_image]\n        D --> E[Read Input Source Content]\n        E --> F[Remove Mermaid Block Markers]\n        F --> G[Generate Image File Path]\n        G --> H[Create Temporary File]\n        H --> I[Write Code to Temporary File]\n        I --> J[Generate Image Using mmdc]\n        J --> K[Delete Temporary File]\n        K --> L[Return Image Path]\n        L --> M[Check if Keyboard Interrupt]\n        M -->|Yes| N[Print Stop Message]\n        M -->|No| O[Increment Source Index]\n        O --> P[Print Current Source]\n        P --> Q[Call convert_to_image]\n        Q --> R[Print Image Path]\n        R --> M\n    \n    ```",
        "temperature": 0.6
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TD;\n        A[Start] --> B[Import Modules];\n        B --> C[Define MermaidDiagramGenerator Class];\n        C --> D[Initialize Class with Theme and Background];\n        D --> E[Define convert_to_image method];\n        E --> F[Read Input Source Content];\n        F --> G[Remove Mermaid Block Markers];\n        G --> H[Generate Image File Path];\n        H --> I[Write Code to Temporary File];\n        I --> J[Run mmdc Command to Generate Image];\n        J --> K[Delete Temporary File];\n        K --> L[Return Image File Path];\n        L --> M[Define _is_file Helper Method];\n        M --> N[Read File Content if File];\n        N --> O[Return Input Source String];\n        O --> P[Define _generate_image_from_code Method];\n        P --> Q[In Main Script];\n        Q --> R[Create MermaidDiagramGenerator Instance];\n        R --> S[Loop Through Input Sources];\n        S --> T[Print Source File];\n        T --> U[Generate Image File];\n        U --> V[Print Image Path];\n        V --> W[Increment Source Index];\n        W --> S;\n        S --> X[Handle Keyboard Interrupt];\n        X --> Y[Print Error Message];\n    \n    ```",
        "temperature": 0.7
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TD\n        A[Start] --> B[Import Modules]\n        B --> C[Define Constructor]\n        C --> D[Define convert_to_image]\n        D --> E[Read Input Source File/String]\n        E --> F{Is File?}\n        F --> |Yes| G[Read File Contents]\n        F --> |No| H[Set Input Source to String]\n        G --> I[Strip Mermaid Block Markers]\n        H --> I\n        I --> J[Generate Image File]\n        J --> K[Return Image Path]\n        K --> L[End convert_to_image]\n        \n        M[Start Main] --> N[Create Generator Instance]\n        N --> O[Loop Through Input Sources]\n        O --> P[Print Source File]\n        P --> Q[Convert to Image]\n        Q --> R[Print Image Path]\n        R --> S[Increment Source Index]\n        S --> O\n        \n        T[Exception Handler] --> U[Print Error Message]\n        U --> V[End Main]\n```",
        "temperature": 0.8
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TD\n        A[Start] --> B[Import Modules]\n        B --> C[Define Constructor]\n        C --> D[Define convert_to_image]\n        D --> E[Read Input Source Content]\n        E --> F{Input is File?}\n        F --> |Yes| G[Read From File]\n        F --> |No| H[Return Input Source]\n        G --> I[Remove Block Markers]\n        H --> I\n        I --> J[Create Temp File]\n        J --> K[Generate Image File]\n        L[Delete Temp File] --> M[Return Image Path]\n        M --> N[End convert_to_image]\n    \n        O[Start Main] --> P[Create Generator Instance]\n        P --> Q[Initialize Input Sources]\n        Q --> R[Start Infinite Loop]\n        \n        subgraph Infinite Loop\n            direction TB\n            \n            R --> S[Print Input Source]\n            S --> T[Call convert_to_image]\n            T --> U[Print Image Path]\n            U --> V[Increment Source Index]\n            V --> R\n        \n        end\n        \n        R --> W[End Main]\n```",
        "temperature": 0.9
    },
    {
        "input": "import subprocess\nimport os\nimport tempfile\n\nclass MermaidDiagramGenerator:\n    def __init__(self, theme='dark', background='transparent'):\n        self._theme = theme\n        self._background = background\n        self._cache_dir = os.path.join(os.getcwd(), 'cache')\n        os.makedirs(self._cache_dir, exist_ok=True)\n\n    def convert_to_image(self, input_source):\n        mermaid_code = self._read_content(input_source)\n        clean_code = self._remove_mermaid_block_markers(mermaid_code)\n        output_path = os.path.join(self._cache_dir, \"output.png\")\n        self._generate_image_from_code(clean_code, output_path)\n        return output_path\n\n    def _is_file(self, input_source):\n        return os.path.isfile(input_source)\n\n    def _read_content(self, input_source):\n        if self._is_file(input_source):\n            with open(input_source, 'r') as file:\n                return file.read()\n        return input_source\n\n    def _remove_mermaid_block_markers(self, code):\n        code_lines = code.strip().splitlines()\n        if code_lines[0].startswith(\"```mermaid\") and code_lines[-1] == \"```\":\n            return \"\\n\".join(code_lines[1:-1]).strip()\n        return code\n\n    def _generate_image_from_code(self, mermaid_code, output_path):\n        with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.mmd') as temp_file:\n            temp_file.write(mermaid_code)\n            input_path = temp_file.name\n        subprocess.run([\"mmdc\", \"-i\", input_path, \"-o\", output_path, \"-t\", self._theme, \"-b\", self._background], check=True)\n        os.remove(input_path)\n\nif __name__ == \"__main__\":\n    generator = MermaidDiagramGenerator()\n\n    input_sources = [\"MermaidGraph_0.txt\", \"MermaidGraph_1.txt\"]  # Paths to Mermaid graph files\n    current_source_index = 0\n\n    try:\n        while True:  # Infinite loop to alternate between input sources\n            input_source = input_sources[current_source_index]\n            print(f\"Generating diagram from: {input_source}\")\n            image_path = generator.convert_to_image(input_source)\n            print(f\"Diagram image created at: {image_path}\")\n            current_source_index = (current_source_index + 1) % len(input_sources)\n    except KeyboardInterrupt:\n        print(\"Live Mermaid flow map generation stopped.\")\n    except Exception as e:\n        print(f\"Error: {e}\")",
        "output": "graph TB\n    \tA[Start] --> B[Import Modules]\n    \tB --> C[Define Generator Class]\n    \tC --> D[Initialize Class with Theme and Background]\n    \tD --> E[Define convert_to_image method]\n    \tE --> F[Read Input Source Content]\n    \tF --> G[Remove Mermaid Block Markers]\n    \tG --> H[Create Temp File with Code]\n    \tH --> I[Generate Image using mmdc Command]\n    \tI --> J[Delete Temp File]\n    \tJ --> K[Return Image Path]\n    \t\n    \tL[Start Main] --> M[Create Generator Instance]\n    \tM --> N[Initialize Input Sources List]\n    \tN --> O[Start Infinite Loop]\n    \t\n    \tO --> P[Print Current Input Source]\n    \tP --> Q[Call convert_to_image method]\n    \tQ --> R[Print Image Path]\n    \tR --> S[Increment Source Index]\n    \tS --> T[Modulo Wrap Index]\n    \tT --> O\n    \t\n    \tO --> U[Handle Keyboard Interrupt]\n    \tU --> V[Print Exit Message]\n    \t\n    \tO --> W[Handle Exceptions]\n    \tW --> V\n    \t\n    \tV --> X[End Program]\n    ```",
        "temperature": 1.0
    }
]